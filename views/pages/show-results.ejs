<!DOCTYPE html>
<html> 
<head> 
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
  <meta http-equiv="Pragma" content="no-cache" />
  <meta http-equiv="Expires" content="0" />

  <link rel="stylesheet" type="text/css" href="https://nav.files.bbci.co.uk/orbit/ece9cb048f668bbc4cc6214737a6cdb6/css/orb-ltr.min.css" rel="stylesheet">

  <meta http-equiv="content-type" content="text/html; charset=UTF-8" /> 
  <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
  <title>Map Quiz Results</title> 
  <script src="http://maps.google.com/maps/api/js?key=AIzaSyDtf3cvpiBnQrcjL0GUb1IkGkqLRhMQz7Y&sensor=false&libraries=geometry" 
  type="text/javascript"></script>
  <style>
  html, body {
    height: 100%;
    margin: 0px;
    padding: 0px
  }
  #map-canvas {
    height: 80%;
    margin: 0px;
    padding: 0px
  }
  .main {
   width:90%;
   padding:20px;
   font-size: 1.2em;
 }
 </style>

</head> 
<body>
	<div id="map" style="width: 1600px; height: 1600px;"></div>
	<!--<div id="map" style="width: 1600px; height: 1600px;"></div>-->
	Try fullscreen ^

  <!--<script src="questions.js"></script> -->
  <!--<script src="location-results.js"></script> -->
  <script type="text/javascript">
  var gameId = "<%= gamesDBResult[0].locations.gameId %>";
  var location1 = "<%= gamesDBResult[0].locations.location1 %>";
  var location1coords = "<%= gamesDBResult[0].locations.location1coords %>".replace("(", "").replace(")", "").split(',');
  var location2 = "<%= gamesDBResult[0].locations.location2 %>";
  var location2coords = "<%= gamesDBResult[0].locations.location2coords %>".replace("(", "").replace(")", "").split(',');
  var location3 = "<%= gamesDBResult[0].locations.location3 %>";
  var location3coords = "<%= gamesDBResult[0].locations.location3coords %>".replace("(", "").replace(")", "").split(',');
  var questions = [ [location1, location1coords[0], location1coords[1]], [location2, location2coords[0], location2coords[1]], [location3, location3coords[0], location3coords[1]] ] ;
  


  // var locations = [
  // ["Jones_Lima", -7.159340532013569,-78.26782775975533, 1],
  // ["AngelaBreen_Lima", -12.743553562845102,-70.39282320000001, 2],
  // ];

  

// Got DB results: { gamesDBResult:
//     [ { id: 2,
//          gameid: '935125    ',
//          created_at: 2021-01-03T17:05:49.111Z,
//          locations: [Object] } ],
    
//     resultsDBResult:
//      [ { resultid: 'Phil_Tehran, Iran',
//          gameid: '935125    ',
//          created_at: 2021-01-03T17:10:09.261Z,
//          resultuser: 'Phil',
//          resultlocationname: 'Tehran, Iran',
//          resultcoordinates: '44.765221343631985,20.66186429999999' },
       

  var resultLocations = [
    <% resultsDBResult.forEach(function(r) { %>
        ["<%= r.resultid %>", <%= r.resultcoordinates.replace("(", "").replace(")", "").split(',')[0] %>, <%= r.resultcoordinates.replace("(", "").replace(")", "").split(',')[0] %>],
    <% }); %>
    ];

  // var resultLocations = [
  // ["Phil_Helsinki, Finland", 55.667484661882334,14.245848674999992, 1],
  // ];

 // Phil_Helsinki, Finland | 638176     | 2021-01-03 15:39:14.498447 | Phil       | Helsinki, Finland  | 55.667484661882334,14.245848674999992
 // Phil_Niamey, Niger     | 638176     | 2021-01-03 15:39:29.742681 | Phil       | Niamey, Niger      | -0.7210158035310592,35.51537992499999
 // Phil_Stockholm, Sweden | 638176     | 2021-01-03 15:39:47.88321  | Phil       | Stockholm, Sweden  | 56.81513133871018,13.059325237499992


  </script>

  <script type="text/javascript">
  var map = new google.maps.Map(document.getElementById('map'), {
    zoom: 3,
    center: new google.maps.LatLng(51.00, 0),
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  var infowindow = new google.maps.InfoWindow();
  var marker, i;
  const image = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png";

  var locationMarker = new Map();
  // console.log("error-ish:" + address + " _____ " + marker)
  // locationMarker.set(resultLocations[i], marker);
  for (i = 0; i < questions.length; i++) {
    //    var address = questions[i].toString()
    marker = new google.maps.Marker({
    position: new google.maps.LatLng(questions[i][1], questions[i][2]),
    map: map,
    icon: image
    });
    locationMarker.set(questions[i][0], marker);
    //locationMarker.set(questions[i][0].replaceAll(" ", ""), marker);
  }

  function haversine_distance(mk1, mk2) {
    var R = 3958.8; // Radius of the Earth in miles
    var rlat1 = mk1.position.lat() * (Math.PI/180); // Convert degrees to radians
    var rlat2 = mk2.position.lat() * (Math.PI/180); // Convert degrees to radians
    var difflat = rlat2-rlat1; // Radian difference (latitudes)
    var difflon = (mk2.position.lng()-mk1.position.lng()) * (Math.PI/180); // Radian difference (longitudes)

    var d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat/2)*Math.sin(difflat/2)+Math.cos(rlat1)*Math.cos(rlat2)*Math.sin(difflon/2)*Math.sin(difflon/2)));
    return d;
  }


  // Display the results as markers
  var count_names = 0;
  var names_map = new Map();
  for (i = 0; i < resultLocations.length; i++) {  

    var name = resultLocations[i][0].split("_")[0]
    var name_number = 1
    if (names_map[name] != null) {
     name_number = names_map[name];
   } else {
     count_names += 1;
     name_number = count_names;
     names_map[name] = count_names;
   }
   var icon_image = "http://maps.google.com/mapfiles/kml/paddle/" + name_number + ".png"

   marker = new google.maps.Marker({
    position: new google.maps.LatLng(resultLocations[i][1], resultLocations[i][2]),
    map: map,
    label: name,
	//icon: icon_image
});

   var question = resultLocations[i][0].split("_")[1]
   console.log("loc=" + resultLocations[i][0] + "+++ question=" + question)
   questionMarker = locationMarker.get(question)
   var line = new google.maps.Polyline({path: [marker.getPosition(), questionMarker.getPosition()], map: map});
      //var polylineLength = google.maps.geometry.spherical.computeLength(line.getPath()) / 1000;
      var polylineLength = haversine_distance(marker, questionMarker);
      resultLocations[i][2] = polylineLength;
      console.log("errorish:" + question + " _____ " + questionMarker + "----" + polylineLength + "====" + resultLocations[i][2] + "==" + name)

      google.maps.event.addListener(marker, 'click', (function(marker, i) {
        return function() {
          infowindow.setContent(resultLocations[i][0] + " (" + Math.round(resultLocations[i][2]) + " miles away)");
          infowindow.open(map, marker);
        }
      })(marker, i));
    }
    </script>


<ul>
    <% resultsDBResult.forEach(function(r) { %>
        <li><%= r.resultid %> - <%= r.gameid %></li>
    <% }); %>
</ul>

  </body>
  </html>
