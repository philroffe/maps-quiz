<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
  <meta http-equiv="Pragma" content="no-cache" />
  <meta http-equiv="Expires" content="0" />
  <title>Geolocation</title>
  <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
  <meta charset="utf-8">
  <link rel="stylesheet" type="text/css" href="https://nav.files.bbci.co.uk/orbit/ece9cb048f668bbc4cc6214737a6cdb6/css/orb-ltr.min.css" rel="stylesheet">
  <link rel="stylesheet" type="text/css" href="/stylesheets/play-game.css" />



  <script type='text/javascript'>
  //parse the database results
  var gameId =  JSON.parse("<%= JSON.stringify(gameId) %>".replace(/&#34;/g, '"'));
  var questions =  JSON.parse("<%= JSON.stringify(locations.myLocations) %>".replace(/&#34;/g, '"'));
  var questionsCompleted = {};
  var playerName = "";
  //console.log("gameId=" + gameId);
  //console.log("questions=" + questions);

  function saveResult() {
    // get updated values to update the saveurl
    var saveurl = generateSaveURL();
    console.log("saveurl=" + saveurl);

    const options = {};
    fetch(saveurl, options)
     .then( res => res.json() )
     .then( data => console.log(data) );
     
    // update the question to show it has been submitted successfully
    var questionpara = document.getElementById('currentQuestionTextLocation');
    var question = questionpara.innerHTML;
    questionsCompleted[question] = true;

    var statusText = "Completed " + Object.keys(questionsCompleted).length + " of " + questions.length;
    document.getElementById('statusText').innerHTML = statusText;

    // hide submit button for 1 secs to show pressed successfully, then reshow
    var submitControlButton = document.getElementById('submitControlButton');
    submitControlButton.style.visibility = "hidden"; 
    setTimeout(() => submitControlButton.style.visibility = "visible", 500);
  }

  function generateSaveURL() {
    var laturl=marker.getPosition().lat();
    var lngurl=marker.getPosition().lng();
    // get the questions
    var questionTextLocation = document.getElementById('currentQuestionTextLocation');
    var question = questionTextLocation.innerHTML;

    // combine as a URL
    var linkurl = baseurl.concat(laturl,comma,lngurl,"&question=",question,"&person=",playerName);
    var saveurl = baseurl.concat(playerName,"_",question,"&gameId=",gameId,"&resultuser=",playerName,"&resultlocationname=",question,"&resultcoordinates=",laturl,comma,lngurl);

    return saveurl;
  }
  </script>

  <script type="text/javascript"
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDtf3cvpiBnQrcjL0GUb1IkGkqLRhMQz7Y&region=GB">
  </script>

  <script src="map-options.js"></script>

  <script>
  var map;
  var marker;
  var laturl;
  var lngurl;
  var baseurl = "/save-result?resultid=";
  var linkurl;
  var comma = ",";

  /** Creates a control to capture the gameId
  */
  function createGameIdControls(map) {
    const gameIdControlDiv = document.createElement('div');
    /////    
    const gameIdText = document.createElement('input');
    gameIdText.setAttribute("id", "gameIdText"); 
    gameIdText.setAttribute("class", "mapbutton"); 
    gameIdText.setAttribute("placeholder", "Game ID?"); 

    // create submit button
    const gameIdSubmitButtonDiv = document.createElement('div');
    gameIdSubmitControlButton = document.createElement('button');
    gameIdSubmitControlButton.setAttribute("class", "btn"); 
    gameIdSubmitControlButton.textContent = 'Submit';
    gameIdSubmitButtonDiv.appendChild(gameIdSubmitControlButton);
    // create the 
    gameIdSubmitControlButton.addEventListener("click", () => {
      var gameId = document.getElementById('gameIdText').value;
      if (gameId.length > 0) {
        // reload the page and goto the new gameId
        location.href = "/play-game?gameId=" + gameId;
      } else {
        alert("Please enter your gameId");
      }
    });

    gameIdControlDiv.appendChild(gameIdText);
    gameIdControlDiv.appendChild(gameIdSubmitButtonDiv);
    return gameIdControlDiv;
  }

  /** Creates a control to capture the player name
  */
  function createNameControls(map) {
    const nameControlDiv = document.createElement('div');
    /////    
    const gameIdHeader = document.createElement('text');
    gameIdHeader.innerHTML = "Game: " + gameId + "<br>";
    gameIdHeader.style.fontSize = "1.4em";

    const nameText = document.createElement('input');
    nameText.setAttribute("id", "nameText"); 
    nameText.setAttribute("class", "mapbutton"); 
    nameText.setAttribute("placeholder", "Your Name?"); 

    // create submit button
    const nameSubmitButtonDiv = document.createElement('div');
    nameSubmitControlButton = document.createElement('button');
    nameSubmitControlButton.setAttribute("class", "btn"); 
    nameSubmitControlButton.textContent = 'Submit';
    nameSubmitButtonDiv.appendChild(nameSubmitControlButton);
    // create the 
    nameSubmitControlButton.addEventListener("click", () => {
      var person = document.getElementById('nameText').value;
      person = person.trim().replace(/ /g, '').replace(/\'/g, '');
      if (person.length > 0) {
        playerName = person;
        // hide the name control and display the main quiz controls
        nameControlDiv.hidden = true;
        const quizControls = createQuizControls(map);
        map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(quizControls);
        loadPreviouslySavedAnswers();
      } else {
        alert("Please enter your name");
      }
    });

    nameControlDiv.appendChild(gameIdHeader);
    nameControlDiv.appendChild(nameText);
    nameControlDiv.appendChild(nameSubmitButtonDiv);
    nameControlDiv.appendChild(document.createElement('div'));
    nameControlDiv.appendChild(createSpacer());
    return nameControlDiv;
  }

  /** Creates a control to capture the player name
  */
  function loadPreviouslySavedAnswers() {
    var url='/api/get-player-answers?gameId=' + gameId + "&name=" + playerName;
    fetch(url)
    .then(response => response.json())
    .then(function(response) {
      //console.log(response);
      Object.keys(response).forEach(function(key) {
        questionsCompleted[response[key].resultLocationName] = true;
      });
      updateQuestionLabels(0);
    }).catch(function() {
      console.log("API/DB error trying to lookup " + playerName + " results from " + gameId);
    });
  }

  /** Creates a control that captures the quiz buttons
  */
  function createQuizControls(map) {
    const quizControlDiv = document.createElement('div');
    quizControlDiv.setAttribute("id", "quizControlDiv"); 

    const quizTextDiv = document.createElement('div');
    const questionPara = document.createElement('p');
    questionPara.setAttribute("class", "mapbutton"); 
    const questionTextNumber = document.createElement('text');
    questionTextNumber.setAttribute("id", "currentQuestionTextNumber"); 
    questionTextNumber.innerHTML = "1. ";
    const questionTextLocation = document.createElement('text');
    questionTextLocation.setAttribute("id", "currentQuestionTextLocation"); 
    questionTextLocation.innerHTML = questions[0];
    const questionTextCompleted = document.createElement('text');
    questionTextCompleted.setAttribute("id", "currentQuestionTextCompleted"); 
    questionPara.appendChild(questionTextNumber);
    questionPara.appendChild(questionTextLocation);
    questionPara.appendChild(questionTextCompleted);

    quizTextDiv.appendChild(questionPara);
    const statusText = document.createElement('b');
    statusText.setAttribute("id", "statusText"); 
    statusText.innerHTML = "Completed 0 of " + questions.length;
    statusText.style.fontSize = "1.2em";
    quizTextDiv.appendChild(statusText);

    // create the next and prev buttons
    prevControlButton = document.createElement('button');
    prevControlButton.setAttribute("class", "mapbutton"); 
    prevControlButton.textContent = 'Prev';
    nextControlButton = document.createElement('button');
    nextControlButton.setAttribute("class", "mapbutton"); 
    nextControlButton.textContent = 'Next';
    // create listeners when next/prev buttons clicked
    prevControlButton.addEventListener("click", () => {
      var currentQuestion = questionTextLocation.innerHTML
      var currentIndex = questions.indexOf(currentQuestion);
      var newIndex = currentIndex;
      if (currentIndex > 0) {
        newIndex = currentIndex - 1;
      } else {
        newIndex = questions.length -1;
      }
      updateQuestionLabels(newIndex);
    });
    nextControlButton.addEventListener("click", () => {
      var currentQuestion = questionTextLocation.innerHTML
      var currentIndex = questions.indexOf(currentQuestion);
      var newIndex = currentIndex;
      if (currentIndex < questions.length - 1) {
        newIndex = currentIndex + 1;
      } else {
        newIndex = 0;
      }
      updateQuestionLabels(newIndex);
    });

    // create submit button
    const submitButtonDiv = document.createElement('div');
    submitControlButton = document.createElement('button');
    submitControlButton.setAttribute("id", "submitControlButton"); 
    submitControlButton.setAttribute("class", "btn"); 
    submitControlButton.textContent = 'Submit';
    submitButtonDiv.appendChild(prevControlButton);
    submitButtonDiv.appendChild(createSpacer());
    submitButtonDiv.appendChild(submitControlButton);
    submitButtonDiv.appendChild(createSpacer());
    submitButtonDiv.appendChild(nextControlButton);
    submitButtonDiv.appendChild(document.createElement('div'));
    submitButtonDiv.appendChild(createSpacer());

    submitControlButton.addEventListener("click", () => {
      saveResult();
      nextControlButton.click();
      // recentre marker and map
      var pos = new google.maps.LatLng(50, 0);
      marker.setPosition(pos);
      map.setCenter(pos);
      map.setZoom(5);
    });

    quizControlDiv.appendChild(quizTextDiv);
    quizControlDiv.appendChild(submitButtonDiv);
    return quizControlDiv;
  }

  function createSpacer() {
    const spacer = document.createElement('i');
    spacer.setAttribute("class", "spacer"); 
    return spacer;
  }

  function updateQuestionLabels(newIndex) {
    var newQuestion = questions[newIndex];
    var isCompleted = ""
    if (questionsCompleted[newQuestion]) {
      isCompleted = " &#10004;"
    }
    document.getElementById('currentQuestionTextNumber').innerHTML = (newIndex+1) + ". ";
    document.getElementById('currentQuestionTextLocation').innerHTML = newQuestion;
    document.getElementById('currentQuestionTextCompleted').innerHTML = isCompleted;
  }

  //set map variables
  function initialize() {
    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

    // add the quiz control buttons and text
    if (questions.length == 0) {
      const gameIdControls = createGameIdControls(map);
      map.controls[google.maps.ControlPosition.CENTER].push(gameIdControls);
    } else {
      const nameControls = createNameControls(map);
      map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(nameControls);
    }

    var pos = new google.maps.LatLng(50, 0);
    marker = new google.maps.Marker({
      map: map,
      position: pos,
      title: 'Drag to location, and click submit when you\'re ready',
      draggable: false,
    });
    //move the marker as the map pans
    map.addListener("center_changed", function() {
        var lat = map.getCenter().lat();
        var lng = map.getCenter().lng();
        marker.setPosition( new google.maps.LatLng( lat, lng ) );
    });

    map.setCenter(pos);

    // polulate the dropdown list of questions
    console.log("Playing game: " + gameId + " Questions:" + questions);
  }

  google.maps.event.addDomListener(window, 'load', initialize);

</script>

</head>
<body>
  <div id="map-canvas"></div>
</body>
</html>
