<!DOCTYPE html>
<html>
<head>
  <title>Geocoding service</title>
  <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
  <meta charset="utf-8">
  <style>
      /* Always set the map height explicitly to define the size of the div
      * element that contains the map. */
      #outer {
        height: 100%;
        width:100%;
        margin: 10px;
      }
      #map {
        height: 100%;
        width:80%;
        margin-left: 20%;
      }
      #quizIdDiv {
        float: left;
      }
      #outer .floattext {
        float: left;
      }
      #outer button {
        background-color: #008CBA; /* Blue */
        border: none;
        color: white;
        padding: 1px 4px;
        margin-left: 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 14px;
      }
      #outer input[type=submit] {
        background-color: #4CAF50; /* Green */
        color: white;
        font-size: 18px;
      }
      #bottom button {
        background-color: #CCCCCC; /* Grey */
        border: none;
        color: black;
        padding: 1px 4px;
        margin-left: 10px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 14px;
      }
      #bottom input {
        font-size: 10px;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      </style>
      <script type="text/javascript">
    var gamecode = "N/A";

    // program to generate random strings
    // declare all characters
    const characters ='0123456789';
    function generateString(length) {
      let result = ' ';
      const charactersLength = characters.length;
      for ( let i = 0; i < length; i++ ) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
      }
      return result;
    }
    </script>
    <script src="countries-with-capitals.js"></script>
    <script src="quiz-data.js"></script>
  </head>
  <body>
    <div id="outer">
     <div style="float: left; width: 300px;">

      <div id="quizIdDiv">Quiz ID: Not Yet Generated</div> <button type="button" onclick="generateGamecode()">  Regenerate!</button>

      <form id="locationForm" action="/save-game" method="post">
        <input type="hidden" id="gameId" name="gameId" value="NOT_YET_GENERATED" readonly>
        <div class="floattext" >Your Name: 
          <input type="text" id="creatorName" name="creatorName" value="Anon" maxlength="6" size="6" data-lpignore="true">
          <br>
        </div>
        <br>
          <p>Choose Quiz Locations:<br>
            
           <div id="dynamicInput"></div>
              <br><button type="button" onclick="addAnotherLocation();">(+) Add Location</button>
                  <button type="button" onclick="removeLastLocation();">(-) Remove Location</button>
              <br><br><input type="submit" value="Submit and Play Game..."><br>
          </form>
          <p>
          <hr>
          <details>
            <summary>Advanced options...</summary>
          <div id="bottom">
            <p>Clone a previous game:
            <span id="listPreviousQuizzes"></span>
            <br><button type="button" onclick="generateFromPreviousGame();">Previous Game ID:</button>
            <input type="text" id="previousGameId" name="previousGameId" maxlength="6" size="6" data-lpignore="true">
          <p>Generate from template:
            <br><button type="button" onclick="generateCapitalCities();">10 Cities of the world</button>
            <br><button type="button" onclick="generateLiverpoolPlayersBirthLocation();">15 Liverpool Players Birth Locations</button>
          </div>
          </details>
        </div>
          <div id="map"></div>
          <br style="clear: left;" />
        <script>
        var locationCount = 0;

        var geocoder;
        var map;
        //var address = "sunderland, uk";
        function initMap() {
          map = new google.maps.Map(document.getElementById('map'), {
            zoom: 8,
            center: {lat: -34.397, lng: 150.644}
          });
          geocoder = new google.maps.Geocoder();
          codeAddress(geocoder, map, null);
      }

      // add an addition text box and hook up listeners
      function addAnotherLocation() {
        locationCount++;
        if (locationCount > 30) {
          // set a max list of locations (otherwise the results page will be too messy and slow)
          return;
        }
        var form = document.getElementById("dynamicInput")
        // create a location text box
        var newLocationText = document.createElement("input"); 
        newLocationText.setAttribute("type", "text"); 
        newLocationText.setAttribute("id", "location" + locationCount); 
        newLocationText.setAttribute("name", "myLocations[]"); 
        
        // create the corresponding coords hidden text box
        var newLocationCoords = document.createElement("input"); 
        newLocationCoords.setAttribute("type", "hidden"); 
        newLocationCoords.setAttribute("id", "location" + locationCount + "coords");
        newLocationCoords.setAttribute("name", "myLocationsCoords[]"); 
        // create the corresponding coords hidden text box
        var newLocationSaveButton = document.createElement("button");
        newLocationSaveButton.type = "button";
        newLocationSaveButton.innerHTML = "Save?";
        newLocationSaveButton.style.backgroundColor = "red";
        newLocationSaveButton.setAttribute("id", "location" + locationCount + "save");
        const currentLocationCount = locationCount;
        newLocationSaveButton.onclick = function() {saveCoords(currentLocationCount)};

        // Append to the form 
        form.appendChild(newLocationText);  
        form.appendChild(newLocationCoords);  
        form.appendChild(newLocationSaveButton);  
        addEventListeners(newLocationText);
      }

      // Remove the last text box
      function removeLastLocation() {
        var form = document.getElementById("dynamicInput")
        var newLocationText = document.getElementById("location" + locationCount)
        var newLocationCoords = document.getElementById("location" + locationCount + "coords")
        var newLocationSave = document.getElementById("location" + locationCount + "save")
        // remove from the form
        form.removeChild(newLocationText);  
        form.removeChild(newLocationCoords);  
        form.removeChild(newLocationSave);
        locationCount--;
      }

      // Clear all text boxes (delete all except the first one and clear ir)
      function clearAll() {
        for (var i = locationCount; i > 1; i--) {
          removeLastLocation();
        }
        document.getElementById("location1").value = "";
        document.getElementById("location1coords").value = "";
        document.getElementById("location1save").innerHTML = "Save?";
        document.getElementById("location1save").style.backgroundColor = "";
      }

      // get address from text box with id, then codeAddress() to loopup coords and save them
      function saveCoords(id) {
        console.log("Saving Coords for id:" + id);
        var address = document.getElementById("location" + id).value;
        if (address) {
          var dummyElement = {target: {id: "location" + id, value: address}}
          codeAddress(geocoder, map, dummyElement)
        }
      }

      // Lookup address from a text box, move map and save co-ords
      function codeAddress(geocoder, map, element) {
        var address;
        if (element) {
          // if call has a valid element, then get updated address
          address = element.target.value;
        }
        if (!address) {
          return;
        }
        geocoder.geocode({'address': address}, function(results, status) {
          console.log("Address Lookup=" + address);
          if (status === 'OK') {
            map.setCenter(results[0].geometry.location);
            var marker = new google.maps.Marker({
              map: map,
              position: results[0].geometry.location
            });
            addressCoords = results[0].geometry.location
            console.log("LOCATION=" + results[0].geometry.location);

            if (element) {
              var addressElementName = element.target.id;
              console.log("addressElementName="+addressElementName)
              document.getElementById(addressElementName + "coords").value = addressCoords;
              document.getElementById(addressElementName + "save").innerHTML = "&#10004;"; // tick
              document.getElementById(addressElementName + "save").style.backgroundColor = "green";
              console.log("TARGETCOORDS=" + document.getElementById(addressElementName + "coords").value);
            }
            
          } else {
            alert('Geocode was not successful for the following reason: ' + status);
          }
        });
      }

      // add event listeners for the location text boxes
      function addEventListeners(element) {
        //element.addEventListener("click", updateValue);
        let timeout = null;
        element.addEventListener('keyup', function (e) {
          // Clear timeout if already set to prevent the previous task from executing
          clearTimeout(timeout);
          // Make a new timeout
          timeout = setTimeout(function () {
              var addressToLookup = e.target.value;
              if ((addressToLookup != null)  && (addressToLookup != "")) {
                codeAddress(geocoder, map, e);
              }
          }, 1000);
        });
      }

      ////////////////////////////////////////////////
      // START OF AUTO GENERATE LOCATION TEMPLATES
      ////////////////////////////////////////////////
      function generateFromPreviousGame(previousGameId) {
        clearAll();
        //var previousGameId = document.getElementById("previousGameId").value
        if (previousGameId) {
          var url='/api/get-game-details?gameId='+previousGameId
          fetch(url)
          .then(response => response.json())
          .then(function(response) {
            //console.log(response)
            for (var i = 1; i < 16; i++) {
              console.log("a="+response["location"+i])
              var thisLocation = response["location"+i]
              if ((thisLocation != null) && (thisLocation != "") && (thisLocation != "undefined")) {
              var element = document.getElementById("location" + i)
              if (element == null) {
                addAnotherLocation();
                element = document.getElementById("location" + i);
              }
                element.value = response["location"+i];
                var elementcoords = document.getElementById("location" + i + "coords")
                if (element == null) {
                  elementcoords.value = response["location" + i + "coords"];
                }
                addEventListeners(element);
              }
            }
          });
        }
      }

      function generateCapitalCities() {
        clearAll();
        // set location and add event listeners for the location text boxes
        for (var i = 1; i <= 10; i++) {
          var randomNumber = Math.floor(Math.random() * countryList.length);
          var element = document.getElementById("location" + i)
          if (element == null) {
            addAnotherLocation();
            element = document.getElementById("location" + i);
          }
          element.value = countryList[randomNumber][1] + ", " + countryList[randomNumber][0]
          //addEventListeners(element);
          if ((geocoder) && (i == 1)) {
            // click the first location to jump map to that location
            // but only once map (and hence geocoder) has been initialised
            //document.getElementById("location" + i).click();
            saveCoords(i);
          }
        } 
      }

      function listPreviousQuizzes() {
        var previousQuizSection = document.getElementById("listPreviousQuizzes")
        for (var i = 0; i < quizHistory.length; i++) {
          var br = document.createElement('div');
          //div.innerHTML = quizHistory[i].date;
          //console.log("test "+ i + ": " + quizHistory[i].id);

          // create the corresponding coords hidden text box
          var cloneButton = document.createElement("button");
          cloneButton.type = "button";
          cloneButton.innerHTML = quizHistory[i].date + ": " + quizHistory[i].description;
          const currentQuizId = quizHistory[i].id;
          cloneButton.onclick = function() {generateFromPreviousGame(currentQuizId)};

          // Append to the form 
          previousQuizSection.appendChild(cloneButton);
          previousQuizSection.appendChild(br);
        }
      }

      function generateLiverpoolPlayersBirthLocation() {
        clearAll();
        // set location and add event listeners for the location text boxes
        for (var i = 0; i < liverpoolPlayersBirthList.length; i++) {
          var elementID = i+1;
          var element = document.getElementById("location" + elementID);
          if (element == null) {
            addAnotherLocation();
            element = document.getElementById("location" + elementID);
          }
          element.value = liverpoolPlayersBirthList[i][1];
          addEventListeners(element);
        } 
        if (geocoder) {
          // click the first location to jump map to that location
          // but only once map (and hence geocoder) has been initialised
          //document.getElementById("location1").click();
          saveCoords(1);
        }
      }
      ////////////////////////////////////////////////
      // END OF AUTO GENERATE LOCATION TEMPLATES
      ////////////////////////////////////////////////

      </script>

      <script type="text/javascript">
      function generateGamecode() {
        gamecode = generateString(6).trim();
        document.getElementById("gameId").value=gamecode
        document.getElementById("quizIdDiv").innerHTML="Quiz ID: " + gamecode
      }

      generateGamecode();
      listPreviousQuizzes();
      // add the first text box to get started
      addAnotherLocation();
      </script>


      <script async defer
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDtf3cvpiBnQrcjL0GUb1IkGkqLRhMQz7Y&callback=initMap">
      </script>

    </body>
    </html>
